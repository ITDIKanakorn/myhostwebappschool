import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:myhost_app/pages/configs/api.dart';
import 'package:myhost_app/pages/configs/app_setting.dart';
import 'package:myhost_app/pages/configs/network_service.dart';
import 'package:myhost_app/pages/model/slip_model.dart';
import 'package:myhost_app/pages/model/tran_model.dart';
import 'package:shared_preferences/shared_preferences.dart';

class NotificationPage extends StatefulWidget {
  const NotificationPage({super.key});

  @override
  State<NotificationPage> createState() => _NotificationPageState();
}

class _NotificationPageState extends State<NotificationPage> {
  Future<List<TransecModel>>? _transec;
  Future<List<SlipModel>>? _slip;
  List<String> approvedTransactions = [];
  String? teacherid;
  String? classId;
  bool _dialogShown = false;

  @override
  void initState() {
    super.initState();
    _transec = ServiceNetwork().getTranDio();
    _slip = ServiceNetwork().getSlipData();
    _loadApprovedTransactions();
  }

  Future<void> _loadApprovedTransactions() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      approvedTransactions = prefs.getStringList('approvedTransactions') ?? [];
      teacherid = prefs.getString(AppSetting.teacheridSetting);
      classId = prefs.getString(AppSetting.classidSetting);
    });
  }

  Future<void> _approveTransaction(String tranId) async {
    final prefs = await SharedPreferences.getInstance();
    approvedTransactions.add(tranId);
    await prefs.setStringList('approvedTransactions', approvedTransactions);
    setState(() {});
  }

  String _formatDate(String dateString) {
    try {
      final DateFormat inputFormat = DateFormat('yyyy-MM-dd');
      final DateFormat thaiFormat = DateFormat('d MMMM yyyy', 'th');
      final DateTime dateTime = inputFormat.parse(dateString);

      final DateTime buddhistDateTime =
          DateTime(dateTime.year + 543, dateTime.month, dateTime.day);

      return thaiFormat.format(buddhistDateTime);
    } catch (e) {
      return dateString; // Return the original string if parsing fails
    }
  }

  String _formatTime(String time) {
    // Assuming the time is in the format "HH:mm:ss"
    final timeParts = time.split(':');
    if (timeParts.length >= 2) {
      return '${timeParts[0]}:${timeParts[1]}'; // Return "HH:mm"
    }
    return time; // If format is unexpected, return as is
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
        children: [
          Stack(
            children: [
              Positioned(
                left: 16.0,
                top: 40.0,
                child: IconButton(
                  icon: Icon(
                    Icons.arrow_back,
                    size: 35.0,
                    color: Colors.orange,
                  ),
                  onPressed: () {
                    Navigator.pushNamed(context, 'thome');
                  },
                ),
              ),
              Center(
                child: Padding(
                  padding: const EdgeInsets.only(top: 49.0),
                  child: Image.asset(
                    'assets/logo1.png',
                    scale: 1.0,
                  ),
                ),
              ),
            ],
          ),
          Container(
            height: MediaQuery.of(context).size.height -
                130.0, // Adjust height as needed
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [
                  Color.fromARGB(255, 61, 87, 254),
                  Color.fromARGB(255, 178, 243, 255)
                ],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
              borderRadius: BorderRadius.only(
                topLeft: Radius.circular(30.0),
                topRight: Radius.circular(30.0),
              ),
            ),
            child: FutureBuilder<List<TransecModel>>(
              future: _transec,
              builder: (context, transecSnapshot) {
                if (transecSnapshot.connectionState ==
                    ConnectionState.waiting) {
                  return Center(child: CircularProgressIndicator());
                } else if (transecSnapshot.hasError) {
                  return Center(
                      child: Text('เกิดข้อผิดพลาด: ${transecSnapshot.error}'));
                } else if (transecSnapshot.hasData) {
                  return FutureBuilder<List<SlipModel>>(
                    future: _slip,
                    builder: (context, slipSnapshot) {
                      if (slipSnapshot.connectionState ==
                          ConnectionState.waiting) {
                        return Center(child: CircularProgressIndicator());
                      } else if (slipSnapshot.hasError) {
                        return Center(
                            child:
                                Text('เกิดข้อผิดพลาด: ${slipSnapshot.error}'));
                      } else if (slipSnapshot.hasData) {
                        final transecList = transecSnapshot.data!;
                        final slipList = slipSnapshot.data!;

                        // Sort transactions by date and time
                        transecList.sort((a, b) {
                          final dateTimeA =
                              DateTime.parse('${a.date} ${a.time}');
                          final dateTimeB =
                              DateTime.parse('${b.date} ${b.time}');
                          return dateTimeB
                              .compareTo(dateTimeA); // Sort descending
                        });

                        return ListView.builder(
                          padding: EdgeInsets.all(10.0),
                          itemCount: transecList.length,
                          itemBuilder: (context, index) {
                            final transec = transecList[index];
                            final slip = slipList.firstWhere(
                              (s) =>
                                  s.account == transec.account &&
                                  s.classId == classId,
                              orElse: () => SlipModel(),
                            );
                            if (slip.account != null && slip.classId != null) {
                              return _buildNotificationCard(transec, slip);
                            } else {
                               if (!_dialogShown) {
                    WidgetsBinding.instance.addPostFrameCallback((_) {
                      setState(() {
                        _dialogShown = true; // Set flag to true after showing dialog
                      });
                      showDialog(
                        context: context,
                        barrierDismissible: false, // Prevent closing by tapping outside
                        builder: (BuildContext context) {
                          return AlertDialog(
                            title: Text('ไม่มีการแจ้งเตือน'),
                            content: Text(
                                'ไม่มีข้อมูลรายการแจ้งเตือนของห้องเรียนนี้'),
                            actions: <Widget>[
                              TextButton(
                                child: Text(
                                  'ตกลง',
                                  style: TextStyle(
                                      fontSize: 16,
                                      fontWeight: FontWeight.bold),
                                ),
                                onPressed: () {
                                  Navigator.of(context).pop();
                                  Navigator.pushNamed(context, 'thome');
                                },
                              ),
                            ],
                          );
                        },
                      );
                    });
                  }
                }
              },
            );
                      } else {
                        return Center(child: Text('ไม่มีข้อมูลที่จะแสดง'));
                      }
                    },
                  );
                } else {
                  return Center(child: Text('ไม่มีข้อมูลที่จะแสดง'));
                }
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildNotificationCard(TransecModel transec, SlipModel slip) {
    final isApproved = approvedTransactions.contains(transec.tranId);
    return Container(
      margin: EdgeInsets.only(bottom: 10.0),
      padding: EdgeInsets.symmetric(horizontal: 8.0),
      child: Card(
        elevation: 5,
        color: isApproved ? Colors.grey.shade200 : Colors.white,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(15),
        ),
        child: Stack(
          children: [
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    transec.transactionType!,
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: transec.transactionType == 'deposit'
                          ? Color.fromARGB(255, 0, 128, 0)
                          : transec.transactionType == 'withdraw'
                              ? Color.fromARGB(255, 255, 0, 0)
                              : Color.fromARGB(255, 255, 128, 0),
                    ),
                  ),
                  SizedBox(height: 8),
                  _buildDetailRow('วันที่',
                      '${_formatDate(transec.date!)} - ${_formatTime(transec.time!)}'),
                  _buildDetailRow(
                      'ชื่อบัญชี', slip.sName! + '  ' + slip.sSurname!),
                  _buildDetailRow('จำนวนเงิน', transec.money.toString()),
                  if (transec.transactionType == 'deposit')
                    _buildDetailRow(
                      'ผู้ฝาก',
                      '${slip.pName!} ${slip.pSurname!}',
                    ),
                ],
              ),
            ),
            Positioned(
              top: 8.0,
              right: 8.0,
              child: IconButton(
                icon: Icon(
                  transec.transactionType == 'deposit'
                      ? Icons.border_color_outlined
                      : Icons.more_vert,
                  color: transec.transactionType == 'deposit'
                      ? Colors.blue
                      : Colors.grey,
                ),
                onPressed: () {
                  _showDetailsDialog(transec, slip, isApproved);
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _showDetailsDialog(
      TransecModel transec, SlipModel slip, bool isApproved) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(
            'รายละเอียด',
            style: TextStyle(
              fontWeight: FontWeight.bold,
              fontSize: 18,
            ),
          ),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildDetailRow('ประเภท', transec.transactionType!),
                _buildDetailRow(
                    'ชื่อ-สกุล', slip.sName! + '  ' + slip.sSurname!),
                _buildDetailRow('ชั้น', slip.classLevel!),
                _buildDetailRow('รหัสประจำตัว', slip.studentId!),
                _buildDetailRow('วันที่',
                    '${_formatDate(transec.date!)} - ${_formatTime(transec.time!)}'),
                _buildDetailRow('จำนวนเงิน', transec.money.toString()),
                if (transec.transactionType == 'deposit')
                  _buildDetailRow(
                    'ผู้ฝาก',
                    '${slip.pName!} ${slip.pSurname!}',
                  ),
                if (transec.transactionType == 'deposit')
                  Padding(
                    padding: const EdgeInsets.only(top: 16.0, bottom: 16.0),
                    child: Column(
                      children: [
                        transec.imagepath != null &&
                                transec.imagepath.toString().isNotEmpty
                            ? Image.network(
                                (transec.transactionType == 'deposit' &&
                                            transec.status != 'approve') ||
                                        transec.approver != null
                                    ? API.BASE_URL +
                                        '/flutterapi/images/' +
                                        transec.imagepath.toString()
                                    : API.BASE_URL +
                                        '/websiteadmin/assets/dist/img/' +
                                        transec.imagepath.toString(),
                                fit: BoxFit.cover,
                              )
                            : _buildDetailRow('เพิ่มเติม ', 'ฝากด้วยเงินสด'),
                      ],
                    ),
                  ),
              ],
            ),
          ),
          actions: [
            if (transec.transactionType == 'deposit' &&
                !isApproved &&
                transec.status != 'approve')
              ElevatedButton(
                onPressed: () {
                  ServiceNetwork().updateWalletAmount(
                      transec.account.toString(), transec.money!, 'deposit');
                  ServiceNetwork().updateApprove(transec.tranId.toString(),
                      'approve', teacherid.toString());
                  _approveTransaction(transec.tranId!);
                  Navigator.of(context).pop();
                  _showApprovalSnackBar();
                },
                child: Text(
                  'อนุมัติ',
                  style: TextStyle(
                      fontWeight: FontWeight.bold, color: Colors.white),
                ),
              ),
            TextButton(
              child: Text(
                'ปิด',
                style: TextStyle(fontSize: 18),
              ),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
          ],
        );
      },
    );
  }

  void _showApprovalSnackBar() {
    final snackBar = SnackBar(
      content: Container(
        padding: EdgeInsets.all(16.0),
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Color.fromARGB(255, 57, 177, 20),
              Color.fromARGB(255, 68, 245, 10),
            ],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
          borderRadius: BorderRadius.circular(10.0),
        ),
        child: Text(
          'อนุมัติเสร็จสิ้น',
          style: TextStyle(
            color: Color.fromARGB(255, 255, 255, 255),
            fontSize: 16,
          ),
        ),
      ),
      behavior: SnackBarBehavior.floating,
      backgroundColor: Colors.transparent,
      duration: Duration(seconds: 2),
      margin: EdgeInsets.symmetric(horizontal: 20.0, vertical: 10.0),
      padding: EdgeInsets.all(0.0),
    );

    ScaffoldMessenger.of(context).showSnackBar(snackBar);
  }

  Widget _buildDetailRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            label,
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
              color: const Color.fromARGB(255, 55, 55, 55),
            ),
          ),
          Text(
            value,
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.w500,
              color: Color.fromARGB(255, 55, 55, 55),
            ),
          ),
        ],
      ),
    );
  }
}

void main() {
  runApp(MaterialApp(
    home: NotificationPage(),
  ));
}
